@using netcore.Models.Crm
@using netcore.Models.CrmViewModels
@inject netcore.Data.ApplicationDbContext _context
@{
    ViewData["Title"] = "CRM Dashboard";
    Layout = "_AdminlteNetcore";

    DateTime start = new DateTime(DateTime.Now.Date.Year, 1, 1);
    DateTime end = start.AddMonths(12);

    List<RatingWidgetViewModel> ratingWidgets = new List<RatingWidgetViewModel>();
    List<Rating> ratings = new List<Rating>();
    ratings = _context.Rating.ToList();
    int ratingCounter = 0;
    foreach (var item in ratings)
    {
        RatingWidgetViewModel vm = new RatingWidgetViewModel();
        vm.RatingName = item.ratingName;
        vm.RatingHex = item.colorHex;

        decimal value = _context.Opportunity.Where(x => x.ratingId.Equals(item.ratingId)).Sum(x => x.estimatedRevenue);
        vm.RatingValue = "$ " + value.ToString("0.00");

        ratingWidgets.Add(vm);

    }

    List<StageWidgetViewModel> stageWidgets = new List<StageWidgetViewModel>();
    List<Stage> stages = new List<Stage>();
    stages = _context.Stage.ToList();
    foreach (var item in stages)
    {
        StageWidgetViewModel vm = new StageWidgetViewModel();
        vm.StageName = item.stageName;
        vm.StageHex = item.colorHex;

        decimal value = _context.Opportunity.Where(x => x.stageId.Equals(item.stageId)).Sum(x => x.estimatedRevenue);
        vm.StageValue = "$ " + value.ToString("0.00");

        stageWidgets.Add(vm);
    }

    List<Opportunity> opportunities = new List<Opportunity>();
    opportunities = _context.Opportunity.ToList();
    decimal les = opportunities.Where(x => x.probability < 50).Sum(x => x.estimatedRevenue);
    decimal mor = opportunities.Where(x => x.probability >= 50).Sum(x => x.estimatedRevenue);
    decimal tot = les + mor;

    int percles = 0;
    int percmor = 0;
    if (tot != 0m)
    {
        percles = Convert.ToInt32(decimal.Divide(les, tot) * 100);
        percmor = Convert.ToInt32(decimal.Divide(mor, tot) * 100);
    }

    List<Opportunity> oppGrid = new List<Opportunity>();
    oppGrid = opportunities.OrderByDescending(x => x.createdAt).Take(15).ToList();


    List<string> labels = new List<string>();

    DateTime now = DateTime.Now;
    DateTime now7 = now.AddMonths(-7);
    DateTime dcount = now7;




    decimal[] valless = new decimal[8];
    List<Opportunity> less = _context.Opportunity.Where(x => x.probability < 50 && (x.estimatedClosingDate.Date >= now7.Date && x.estimatedClosingDate.Date <= now.Date)).ToList();
    int index = 0;
    while (now7.Date <= now.Date)
    {
        valless[index] = less.Where(x => x.estimatedClosingDate.Date.Month.Equals(now7.Month)).Sum(x => x.estimatedRevenue);
        labels.Add(now7.ToString("MMMM"));
        now7 = now7.AddMonths(1);
        index++;
    }


    decimal[] valmore = new decimal[8];
    now7 = now.AddMonths(-7);
    index = 0;
    List<Opportunity> more = _context.Opportunity.Where(x => x.probability >= 50 && (x.estimatedClosingDate.Date >= now7.Date && x.estimatedClosingDate.Date <= now.Date)).ToList();


    while (now7.Date <= now.Date)
    {
        valmore[index] = more.Where(x => x.estimatedClosingDate.Month.Equals(now7.Month)).Sum(x => x.estimatedRevenue);
        now7 = now7.AddMonths(1);
        index++;
    }

}



<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Info boxes -->
        <div class="row">
            @foreach (var item in ratingWidgets)
            {
                if (ratingCounter != 0 && ratingCounter % 3 == 0)
                {
                @:</div>
                @:<div class="row" style="margin-top:20px;">


                }
                <div class="col-md-4 col-sm-6 col-xs-12">
                    <div class="info-box">
                        <span class="info-box-icon" style="background-color:@item.RatingHex;"><i class="fa fa-star-o" style="color:white;"></i></span>
                        <div class="info-box-content">
                            <span class="info-box-text">@item.RatingName</span>
                            <span class="info-box-number">@item.RatingValue</span>
                        </div>
                        <!-- /.info-box-content -->
                    </div>
                    <!-- /.info-box -->
                </div>
                ratingCounter++;

            }

        </div>
        <!-- /.row -->
        <div class="row">
            <div class="col-md-12">
                <div class="box">
                    <div class="box-header with-border">
                        <h3 class="box-title">Monthly Recap Report [Probability less then 50% vs more then 50%]</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <div class="btn-group">
                                <button type="button" class="btn btn-box-tool dropdown-toggle" data-toggle="dropdown">
                                    <i class="fa fa-wrench"></i>
                                </button>
                                <ul class="dropdown-menu" role="menu">
                                    <li><a href="#">Action</a></li>
                                    <li><a href="#">Another action</a></li>
                                    <li><a href="#">Something else here</a></li>
                                    <li class="divider"></li>
                                    <li><a href="#">Separated link</a></li>
                                </ul>
                            </div>
                            <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                        </div>
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="row">
                            <div class="col-md-8">
                                <p class="text-center">
                                    <strong></strong>
                                </p>
                                <div class="chart">
                                    <!-- Sales Chart Canvas -->
                                    <canvas id="salesChart" style="height: 180px;"></canvas>
                                </div>
                                <!-- /.chart-responsive -->
                            </div>
                            <!-- /.col -->
                            <div class="col-md-4">
                                <p class="text-center">
                                    <strong>Opportunity Probability</strong>
                                </p>

                                <!-- /.progress-group -->
                                <div class="progress-group">
                                    <span class="progress-text">Probability < 50</span>
                                    <span class="progress-number"><b>@les</b>/@tot</span>
                                    <div class="progress sm">
                                        <div class="progress-bar progress-bar-warning" style="width: @percles%"></div>
                                    </div>
                                </div>
                                <!-- /.progress-group -->
                                <div class="progress-group">
                                    <span class="progress-text">Probability >= 50</span>
                                    <span class="progress-number"><b>@mor</b>/@tot</span>
                                    <div class="progress sm">
                                        <div class="progress-bar progress-bar-primary" style="width: @percmor%"></div>
                                    </div>
                                </div>

                            </div>
                            <!-- /.col -->
                        </div>
                        <!-- /.row -->
                    </div>

                </div>
                <!-- /.box -->
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->

        <div class="row">
            <div class="col-md-8">
                <div class="box box-info">
                    <div class="box-header with-border">
                        <h3 class="box-title">Latest Opportunities</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                        </div>
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body">
                        <div class="table-responsive">
                            <table class="table no-margin">
                                <thead>
                                    <tr>
                                        <th>Opportunity</th>
                                        <th>Probability</th>
                                        <th>Rating</th>
                                        <th>Stage</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in oppGrid)
                                    {
                                        <tr>
                                            <td>
                                                @Html.DisplayFor(modelItem => item.opportunityName)
                                            </td>
                                            <td>
                                                <div class="progress xs">
                                                    <div class="progress-bar progress-bar-green" style="width: @item.probability%;"></div>
                                                </div>
                                            </td>
                                            <td>

                                                <span class="label" style="background-color:@item.rating.colorHex">
                                                    @Html.DisplayFor(modelItem => item.rating.ratingName)
                                                </span>
                                            </td>
                                            <td>
                                                <span class="label" style="background-color:@item.stage.colorHex">
                                                    @Html.DisplayFor(modelItem => item.stage.stageName)
                                                </span>

                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <!-- /.table-responsive -->
                    </div>
                    <!-- /.box-body -->
                    <div class="box-footer clearfix">
                        <a href="@Url.Action("Create", "Opportunity")" class="btn btn-sm btn-info btn-flat pull-left">Create New Opportunity</a>
                        <a href="@Url.Action("Index", "Opportunity")" class="btn btn-sm btn-default btn-flat pull-right">View All Opportunities</a>
                    </div>
                    <!-- /.box-footer -->
                </div>
            </div>
            <div class="col-md-4">
                @foreach (var item in stageWidgets)
                {
                    <div class="info-box" style="background-color:@item.StageHex;color:white;">
                        <span class="info-box-icon"><i class="ion ion-ios-pricetag-outline"></i></span>
                        <div class="info-box-content">
                            <span class="info-box-text">@item.StageName</span>
                            <span class="info-box-number">@item.StageValue</span>

                        </div>
                        <!-- /.info-box-content -->
                    </div>
                }
            </div>
        </div>

    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

    <!-- Bootstrap 3.3.7 -->
    <link rel="stylesheet" href="~/adminlte/components/bootstrap/dist/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="~/adminlte/components/font-awesome/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="~/adminlte/components/Ionicons/css/ionicons.min.css">
    <!-- jvectormap -->
    <link rel="stylesheet" href="~/adminlte/components/jvectormap/jquery-jvectormap.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="~/adminlte/dist/css/AdminLTE.min.css">
    <!-- AdminLTE Skins. Choose a skin from the css/skins
         folder instead of downloading all of them to reduce the load. -->
    <link rel="stylesheet" href="~/adminlte/dist/css/skins/_all-skins.min.css">
    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
    <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <!-- Google Font -->
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700,300italic,400italic,600italic">
}


@section Scripts{
    <!-- jQuery 3 -->
    <script src="~/adminlte/components/jquery/dist/jquery.min.js"></script>
    <!-- Bootstrap 3.3.7 -->
    <script src="~/adminlte/components/bootstrap/dist/js/bootstrap.min.js"></script>
    <!-- FastClick -->
    <script src="~/adminlte/components/fastclick/lib/fastclick.js"></script>
    <!-- AdminLTE App -->
    <script src="~/adminlte/dist/js/adminlte.min.js"></script>
    <!-- Sparkline -->
    <script src="~/adminlte/components/jquery-sparkline/dist/jquery.sparkline.min.js"></script>
    <!-- jvectormap  -->
    <script src="~/adminlte/plugins/jvectormap/jquery-jvectormap-1.2.2.min.js"></script>
    <script src="~/adminlte/plugins/jvectormap/jquery-jvectormap-world-mill-en.js"></script>
    <!-- SlimScroll -->
    <script src="~/adminlte/components/jquery-slimscroll/jquery.slimscroll.min.js"></script>
    <!-- ChartJS -->
    <script src="~/adminlte/components/chart.js/Chart.js"></script>
    <!-- AdminLTE dashboard demo (This is only for demo purposes) -->
    <!-- AdminLTE for demo purposes -->
    <script src="~/adminlte/dist/js/demo.js"></script>

    <script>
        $(function () {
            // -----------------------
            // - MONTHLY SALES CHART -
            // -----------------------

            var jvalless = @Html.Raw(Json.Serialize(valless));
            var jvalmore = @Html.Raw(Json.Serialize(valmore));
            var jlabels = @Html.Raw(Json.Serialize(labels));


            // Get context with jQuery - using jQuery's .get() method.
            var salesChartCanvas = $('#salesChart').get(0).getContext('2d');
            // This will get the first returned node in the jQuery collection.
            var salesChart = new Chart(salesChartCanvas);

            var salesChartData = {
                labels: jlabels,
                datasets: [
                    {
                        label: 'Less',
                        fillColor: '#f39c12',
                        strokeColor: 'rgb(210, 214, 222)',
                        pointColor: '#f39c12',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgb(220,220,220)',
                        data: jvalless
                    },
                    {
                        label: 'More',
                        fillColor: 'rgba(60,141,188,0.9)',
                        strokeColor: 'rgba(60,141,188,0.8)',
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: jvalmore
                    }
                ]
            };

            var salesChartOptions = {
                // Boolean - If we should show the scale at all
                showScale: true,
                // Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: false,
                // String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                // Number - Width of the grid lines
                scaleGridLineWidth: 1,
                // Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                // Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                // Boolean - Whether the line is curved between points
                bezierCurve: true,
                // Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                // Boolean - Whether to show a dot for each point
                pointDot: false,
                // Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                // Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                // Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                // Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                // Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                // Boolean - Whether to fill the dataset with a color
                datasetFill: true,
                // String - A legend template
                legendTemplate: '<ul class=\'<%=name.toLowerCase()%>-legend\'><% for (var i=0; i<datasets.length; i++){%><li><span style=\'background-color:<%=datasets[i].lineColor%>\'></span><%=datasets[i].label%></li><%}%></ul>',
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                // Boolean - whether to make the chart responsive to window resizing
                responsive: true
            };

            // Create the line chart
            salesChart.Line(salesChartData, salesChartOptions);

            // ---------------------------
            // - END MONTHLY SALES CHART -
            // ---------------------------
        });
    </script>

}


